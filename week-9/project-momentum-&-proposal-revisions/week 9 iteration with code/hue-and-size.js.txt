import { select } from 'd3';

export const hue = (
  selection,
  { data, xScale, yScale },
) => {
  // Create a linear scale for circle radius based on HP
  const radiusScale = d3
    .scaleLinear()
    .domain([1, 200]) // HP range
    .range([3, 10]); // MIN and MAX radii for circles

  // CHECKING FOR OVERLAP IN CIRCLES, for opacity
  const circles = data.map((d) => ({
    ...d,
    radius: radiusScale(d.HP),
    cx: xScale(d.speed),
    cy: yScale(d.attack - d.defense),
  }));

  // array of OVERLAPS
  const overlapCounts = new Array(circles.length).fill(1); // Start with an opacity of 1

  // Check for overlaps
  for (let i = 0; i < circles.length; i++) {
    for (let j = i + 1; j < circles.length; j++) {
      const dx = circles[i].cx - circles[j].cx;
      const dy = circles[i].cy - circles[j].cy;
      const distance = Math.sqrt(dx * dx + dy * dy);
      const radiusSum =
        circles[i].radius + circles[j].radius;

      if (distance < radiusSum) {
        overlapCounts[i]++;
        overlapCounts[j]++;
      }
    }
  }

  // CIRCLE DATA
  selection
    .selectAll('circle')
    .data(circles)
    .join('circle')
    .attr('cx', (d) => d.cx) // X-axis: speed
    .attr('cy', (d) => d.cy) // Y-axis: offensive/defensive balance
    .attr('r', (d) => d.radius) // Circle radius based on HP
    .attr('fill', (d) => {
      // Assign colors based on PokÃ©mon type
      if (d.type.includes('Water')) return 'blue'; // Water types are blue
      if (d.type.includes('Fire')) return 'red'; // Fire types are red
      if (d.type.includes('Grass')) return 'green'; // Grass types are green
      return 'gray'; // Other types are gray
    })
    .attr('opacity', (d, i) => {
      const count = overlapCounts[i];
      return count > 1 ? Math.min(1, count / 5) : 1; // Adjust opacity based on overlap count
    });
};
